分析 object_init_ex


ZEND_FUNCTION(test)
{
    zval *obj;
    MAKE_STD_ZVAL(obj); // 该宏php7已废弃
    object_init_ex(obj, user_ce);

    //如果确认此类没有构造函数就不用调用了。
    call_user_function(NULL, obj, "__construct", "");
    call_user_function(NULL, obj, "echo", "");
    zval_ptr_dtor(&obj);

    return;
}


#define object_init_ex(arg, ce)	_object_init_ex((arg), (ce) ZEND_FILE_LINE_CC)

# define ZEND_FILE_LINE_CC

ZEND_API int _object_init_ex(zval *arg, zend_class_entry *class_type ZEND_FILE_LINE_DC) 
	return _object_and_properties_init(arg, class_type, 0 ZEND_FILE_LINE_RELAY_CC);
}

# define ZEND_FILE_LINE_DC

# define ZEND_FILE_LINE_RELAY_CC

/* This function requires 'properties' to contain all props declared in the
 * class and all props being public. If only a subset is given or the class
 * has protected members then you need to merge the properties separately by
 * calling zend_merge_properties(). */
ZEND_API int _object_and_properties_init(zval *arg, zend_class_entry *class_type, HashTable *properties ZEND_FILE_LINE_DC) 
{
	if (UNEXPECTED(class_type->ce_flags & (ZEND_ACC_INTERFACE|ZEND_ACC_TRAIT|ZEND_ACC_IMPLICIT_ABSTRACT_CLASS|ZEND_ACC_EXPLICIT_ABSTRACT_CLASS))) {
	
		if (class_type->ce_flags & ZEND_ACC_INTERFACE) {
			zend_throw_error(NULL, "Cannot instantiate interface %s", ZSTR_VAL(class_type->name));
		} else if (class_type->ce_flags & ZEND_ACC_TRAIT) {
			zend_throw_error(NULL, "Cannot instantiate trait %s", ZSTR_VAL(class_type->name));
		} else {
			zend_throw_error(NULL, "Cannot instantiate abstract class %s", ZSTR_VAL(class_type->name));
		}

		ZVAL_NULL(arg);
		Z_OBJ_P(arg) = NULL;
		return FAILURE;
	}

	if (UNEXPECTED(!(class_type->ce_flags & ZEND_ACC_CONSTANTS_UPDATED))) {
		if (UNEXPECTED(zend_update_class_constants(class_type) != SUCCESS)) {
			ZVAL_NULL(arg);
			Z_OBJ_P(arg) = NULL;
			return FAILURE;
		}
	}

	if (class_type->create_object == NULL) {

		ZVAL_OBJ(arg, zend_objects_new(class_type));

		if (properties) {
			object_properties_init_ex(Z_OBJ_P(arg), properties);
		} else {
			object_properties_init(Z_OBJ_P(arg), class_type);
		}

	} else {
		ZVAL_OBJ(arg, class_type->create_object(class_type));
	}

	return SUCCESS;
}




